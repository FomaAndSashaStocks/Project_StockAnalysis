from tkinter import *
import random
import pygame
import stddraw
from instream import InStream


def find_word(String, pat, first, k=0):
    if(k == 0): k = len(String)
    i = first
    while(i < k):
        if((String[i] == pat[0]) or (String[i] == pat[0].upper())):
            j = 1
            while ((j < len(pat)) and (i + j < len(String)) and (String[i + j] == pat[j])):
                j += 1
                if (j == len(pat)): return i + j
            i = i + j
        else:
            i += 1
    return i


def extraction(pat_start, pat_end, text, start):
    arr = []
    i = 0
    end = 0
    ch0 = find_word(text, start, end)
    while(i < len(text)):
        start = find_word(text, pat_start, ch0)
        end = find_word(text, pat_end, start)
        ch0 = end
        i = end
        tmp = text[start:end - len(pat_end)]
        tmp0 = tmp.split(">")
        try:
            arr += [float(tmp0[len(tmp0) - 1])]
        except ValueError:
            print(tmp0[len(tmp0) - 1])
            #pass
    return arr


def array_pars(symb):
    page = InStream("https://finance.yahoo.com/quote/" + symb + "/history?p=" + symb)
    mass = page.readAll()
    return extraction(',"open":', ',"high"', mass, "HistoricalPriceStore")


def reordering(arr):
    for i in range(0, len(arr)//2 + 1):
        if(i != len(arr) - i - 1):
            tmp = arr[i]
            arr[i] = arr[len(arr) - i - 1]
            arr[len(arr) - i - 1] = tmp

def max_min(a):
    max = a[0]
    min = a[0]
    for i in range(1, len(a)):
        if(max < a[i]):
            max = a[i]
        if(min > a[i]):
            min = a[i]
    return [min, max]


def dif_average(a):
    Average = 0
    for i in range(0, len(a)):
        Average += a[i]

    return(a[len(a) - 1] - float(Average)/len(a))


#average_growth(a) returns the value of average growth between a[i] and a[i+1]
# and total increase and decrease
def average_growth(a):
    increase = 0
    decrease = 0
    for i in range(0, len(a) - 2):
        if(a[i + 1] > a[i]):
            increase += (a[i + 1] - a[i])
        if(a[i + 1] < a[i]):
            decrease += (a[i + 1] - a[i])

    return [increase, decrease, (increase + decrease)/(len(a) - 1)]


def extremal_values_BEST(a):
    i = 1
    extr_val = []
    while(i < len(a)):
        #ascending interval
        if((i < len(a)) and (a[i] > a[i - 1])):
            extr_val += [[i, 1]]
            i += 1
            while((i < len(a)) and (a[i] >= a[i - 1])):
                extr_val[len(extr_val) - 1][0] = i
                i += 1
        #descending interval
        if ((i < len(a)) and (a[i] < a[i - 1])):
            extr_val += [[i, -1]]
            i += 1
            while ((i < len(a)) and (a[i] <= a[i - 1])):
                extr_val[len(extr_val) - 1][0] = i
                i += 1
    return extr_val





Crypts = ['BTC-USD', 'XRP-USD', 'ETH-USD', 'BCH-USD', 'XLM-USD', 'LTC-USD', 'EOS-USD',
          'USDT-USD', 'TRX-USD', 'ADA-USD', 'BNB-USD', 'IOT-USD', 'XNR-USD', 'NEO-USD',
          'DASH-USD', 'XEM-USD', 'VEN-USD', 'ETC-USD', 'WAVES-USD', 'ZEC-USD', 'ZRX-USD',
          'XRB-USD', 'LINK-USD', 'DOGE-USD', 'BTG-USD']

Stocks = {'General Electric': 'GE',   'Bank of American Corporation': 'BAC',   'Kinross Gold Corporation': 'KGC',
          'Advances Micro Devices, Inc.': 'AMD',   'Microsoft Company': 'MSFT',   'Apple Inc': 'AAPL',
          'AT&T Inc.': 'T',   'Cisco Systems, Inc.': 'CSCO',   'Chesapeake Energy Corporation': 'CHK',
          'Oracle Corporation': 'ORCL',   'Pfizer Inc.': 'PFE',   'Ford Motor Company': 'F',
          'Facebook, Inc.': 'FB',   'Wells Fargo & Company': 'WFS',   'Verzion Communications Inc.': 'VZ',
          'Enbridge Energy Partners, L.P.': 'EEP',   'Micron Technology, Inc.': 'MU',   'Intel Corporation': 'INTC',
          'Citigroup Inc.': 'C',   'JD.com, Inc.': 'JD',   'Exxon Mobil Corporation': 'XOM',
          'Huntington Bancshares Incorporated': 'HBAN',   'JPMorgan Chase & Co.': 'JPM',   'Comcast Corporation': 'CMCSA',
          'Twitter, Inc.': 'TWTR', 'Canada Goose Holdings, Inc.': 'GOOS',   'ANGI Homeservices Inc.': 'ANGI',
          'Red Eagle Mining Corporation': 'RDEMF',   'Suzano Papel e Celulose S.A.': 'SUZ',   'Federal National Mortgage Association': 'FNMAM',
          'Freddie Mac': 'FMCCO',   'AmTrust Financial Services, Inc.': 'AFSS',   'Uxin Limited': 'UXIN',
          'NIKE, Inc.': 'NKE',   'Grupo Mexico S.A.B. de C.V.': 'GMBXF',   'Genworth Financial, Inc.': 'GNW',
          'Ashmore Group PLC': 'AJMPF',   'The Stars Group Inc.': 'TSG',   'ASOS Plc': 'ASOMY',
          'Immunomedics, Inc.': 'IMMU',   'Hengan International Group Compamy Limited': 'HEGIY',   'Valeo SA': 'VLEEY',
          'Just Eat plc': 'JSTTY', 'MFA Financial, Inc.': 'MFA-PB',
          'Perrigo Company plc': 'PRGO',   'ZhongAn Online P&C Insurance Co., Ltd.': 'ZZHGF',   'Hutchison China MediTech Limited': 'HCM',
          'Telecom Italia S.p.A.': 'TIAOF',   'Jazz Pharmaceuticals plc': 'JAZZ',   'Amarin Corporation plc': 'AMRN',
          'Etsy, Inc': 'ETSY', '2U, Inc': 'TWOU',   'Bilibili, Inc.': 'BILI',
          'The Trade Desk': 'TTD',   'Coupa Software Incorporated': 'COUP',   'Conagra Brands, Inc.': 'CAG', 'MSA Safety Incorporated': 'MSA',
          'Akcea Therapeutics, Inc.': 'AKCA', 'MongoDB, Inc.': 'MDB', 'Blueprint Medecines Corporation': 'BPMC',
          'Delek US Holdings, Inc.': 'DK',   'BlackBerry Limited': 'BB',   "BJ's Wholesale Club Holdings, Inc.": 'BJ',
          'Nine Dragons Paper (Holdings) Limited': 'NDGPF',   'Pluralsight, Inc.': 'PS',   'LiveRamp Holdings, Inc.': 'RAMP'}

name = [""]
type = [""]

def start_page():
    list_stoc.place_forget()
    scroll_stoc.place_forget()
    list_cryp.place_forget()
    scroll_cryp.place_forget()
    lb_stock.pack_forget()
    lb_cryp.pack_forget()
    bt_choose_stoc.place_forget()
    bt_choose_cryp.place_forget()
    output.pack_forget()

    lb_main.pack()
    lb.pack()
    bt_cryp.place(x=325, y=280, height=50, width=150)
    bt_stoc.place(x=325, y=200, height=50, width=150)


def stocks():
    bt_cryp.place_forget()
    bt_stoc.place_forget()
    lb_main.pack_forget()
    lb.pack_forget()

    type[0] = "stoc"
    lb_stock.pack()
    list_stoc.place(x=10, y=50, height=200, width=250)
    scroll_stoc.place(x=260, y=50, height=200, width=20)
    bt_choose_stoc.place(x=10, y=250, height=30, width=270)


def crypts():
    bt_cryp.place_forget()
    bt_stoc.place_forget()
    lb_main.pack_forget()
    lb.pack_forget()

    type[0] = "cryp"
    lb_cryp.pack()
    list_cryp.place(x=10, y=50, height=200, width=80)
    scroll_cryp.place(x=90, y=50, height=200, width=20)
    bt_choose_cryp.place(x=10, y=250, height=30, width=100)


def analysis():
    list_stoc.place_forget()
    scroll_stoc.place_forget()
    list_cryp.place_forget()
    scroll_cryp.place_forget()
    lb_stock.pack_forget()
    lb_cryp.pack_forget()
    bt_choose_stoc.place_forget()
    bt_choose_cryp.place_forget()

    text = ""
    out.set("please wait")
    output.pack()

    if(type[0] == "cryp"):
        sel = list_cryp.curselection()
        name[0] = list_cryp.get(first=sel)
        a = array_pars(name[0])
        reordering(a)
        # for i in range(0, len(a) - 1):
        #    print(a[i], end=' ')

        text += 'difference: ' + str(dif_average(a)) + "\n"
        p = average_growth(a)
        text += "total increase: " + str(p[0]) + '\ntotal decrease: ' + str(p[1]) + '\naverage growth: ' + str(p[2]) + "\n"

    if(type[0] == "stoc"):
        sel = list_stoc.curselection()
        name[0] = list_stoc.get(first=sel)
        a = array_pars(Stocks[name[0]])
        reordering(a)
        # for i in range(0, len(a) - 1):
        #    print(a[i], end=' ')
        text += 'difference: ' + str(dif_average(a)) + "\n"
        p = average_growth(a)
        text += "total increase: " + str(p[0]) + '\ntotal decrease: ' + str(p[1]) + '\naverage growth: ' + str(p[2]) + "\n"

    out.set(text)
    output.pack()

root = Tk()
root.title("Stock expert")
root.geometry("800x500")


#MENU
menu = Menu(font="Veranda 40", tearoff=0)

SubFile = Menu(tearoff=0)
SubFile.add_separator()
SubFile.add_command(label="Exit", command=exit)

SubEdit = Menu(tearoff=0)
SubEdit.add_command(label="sart page", command=start_page)

menu.add_cascade(label="File", menu=SubFile)
menu.add_cascade(label="Edit", menu=SubEdit)

root.config(menu=menu)


#LABELS
txt1 = "Welcome to the Stock expert!\n"
txt2 = "Choose your market"
out = StringVar()
lb_main = Label(text=txt1, justify=CENTER, font="Veranda 20")
lb = Label(text=txt2, justify=CENTER, font="Veranda 15")
lb_stock = Label(text="Choose yor stock", font="Veranda 15")
lb_cryp = Label(text="Choose yor crypto currency", font="Veranda 15")
output = Label(textvariable=out, font="Veranda 12", justify=LEFT)


#BUTTONS
bt_cryp = Button(text="Cryptocurrencies", font="Veranda 12", command=crypts)
bt_stoc = Button(text="Stocks", font="Veranda 12", command=stocks)
bt_choose_cryp = Button(text="choose", font="Veranda 10", command=analysis)
bt_choose_stoc = Button(text="choose", font="Veranda 10", command=analysis)


#LISTS
scroll_stoc = Scrollbar(root)
list_stoc = Listbox(yscrollcommand=scroll_stoc.set, width=20)
for i in Stocks:
    list_stoc.insert(END, i)
scroll_stoc.config(command=list_stoc.yview)

scroll_cryp = Scrollbar(root)
list_cryp = Listbox(yscrollcommand=scroll_cryp.set, width=20)
for i in Crypts:
    list_cryp.insert(END, i)
scroll_cryp.config(command=list_cryp.yview)


start_page()

root.mainloop()
